/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package LoRDeckMaster;

import io.github.pixee.security.BoundedLineReader;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Clipboard;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

import no.stelar7.api.r4j.impl.lor.LoRDeckCode;

/**
 *
 * @author hoski
 */
public class DeckManagerWindow extends javax.swing.JFrame {

    DefaultListModel<Deck> dlmDecks = new DefaultListModel<Deck>();
    DeckEditorWindow deckEditorWindow = new DeckEditorWindow(this);
    
    /**
     * Creates new form DeckManagerWindow
     */
    public DeckManagerWindow() {
        initComponents();
        deckEditorWindow.setVisible(false);
        
        // Try to read in any existing user decks.
        try {
            BufferedReader br = new BufferedReader(new FileReader("USER_DECK_CODES.txt"));
            
            String deckName, deckCode;
            int i = 0;
            while ((deckName = BoundedLineReader.readLine(br, 5_000_000)) != null && (deckCode = BoundedLineReader.readLine(br, 5_000_000)) != null) {
                dlmDecks.addElement(new Deck(deckCode));
                dlmDecks.getElementAt(i).setName(deckName);
                i++;
            }
            
            br.close();
        }
        // If the file could not be found, create a few starter decks for the user.
        catch (IOException ex) {
            dlmDecks.addElement(new Deck("CEAAEBYBAEDRMGREFYZDKCABAABQMCYSCQNB2JYCAQAQABYMFIWAMAIBBEKCAIRHFE"));
            dlmDecks.getElementAt(0).setName("Buff and Tuff");
            dlmDecks.addElement(new Deck("CEAAECABAIDASDAUDIOC2OIJAECBEEY3DQTSQNBXHMBAEAIEBUWAIAICC4MB4KY"));
            dlmDecks.getElementAt(1).setName("Spells and Stealth");
            dlmDecks.addElement(new Deck("CEAAECABAMGA6EYXEYVS4NYIAECQCGY5FAVTCMRVAICACAYCBELDGBABAURCMKJW"));
            dlmDecks.getElementAt(2).setName("Death and Spiders");
        }
        
        jlstDecks.setCellRenderer(new DeckCellRenderer(dlmDecks));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jlstDecks = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        btnImport = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnExport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("LoR Deck Master");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jlstDecks.setModel(dlmDecks);
        jlstDecks.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlstDecksValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jlstDecks);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("DECKS");

        btnImport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/import_icon.png"))); // NOI18N
        btnImport.setToolTipText("Import a new deck.");
        btnImport.setContentAreaFilled(false);
        btnImport.setFocusable(false);
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        btnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/new_icon.png"))); // NOI18N
        btnNew.setToolTipText("Create a new deck.");
        btnNew.setContentAreaFilled(false);
        btnNew.setFocusable(false);
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/edit_icon.png"))); // NOI18N
        btnEdit.setToolTipText("Edit selected deck.");
        btnEdit.setContentAreaFilled(false);
        btnEdit.setEnabled(false);
        btnEdit.setFocusPainted(false);
        btnEdit.setFocusable(false);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/delete_icon.png"))); // NOI18N
        btnDelete.setToolTipText("Delete selected deck.");
        btnDelete.setContentAreaFilled(false);
        btnDelete.setEnabled(false);
        btnDelete.setFocusable(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/export_icon.png"))); // NOI18N
        btnExport.setToolTipText("Export selected deck.");
        btnExport.setContentAreaFilled(false);
        btnExport.setEnabled(false);
        btnExport.setFocusable(false);
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNew)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnImport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExport)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnNew, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnImport, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel1))
                    .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnExport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        // Prompt the user for a deck code.
        String deckCode = JOptionPane.showInputDialog(rootPane, "Enter deck code:", "Import Deck", JOptionPane.INFORMATION_MESSAGE);
        // Return if the user exited the window, clicked cancel, or clicked "OK" with no text input.
        if (deckCode == null || "".equals(deckCode))
            return;
        try {
            // Try to import the deck...
            dlmDecks.addElement(new Deck(deckCode));
            JOptionPane.showMessageDialog(rootPane, "Successfully imported deck!", "Import Deck", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            // If something went wrong while importing the deck, warn the user.
            JOptionPane.showMessageDialog(rootPane, "Invalid deck code! Please try again.", "Import Deck", JOptionPane.ERROR_MESSAGE);
        }        
    }//GEN-LAST:event_btnImportActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        int index = jlstDecks.getSelectedIndex();
        if (index == -1) 
            return;
        
        // Get the currently selected deck and its deck code.
        Deck deck = dlmDecks.getElementAt(index);
        String deckCode = LoRDeckCode.encode(deck.getDeck());

        Object[] options = { "Copy to clipboard" };
        int n = JOptionPane.showOptionDialog(rootPane, "Share this deck code with others:" + "\n" + deckCode,
                                             "Export Deck", JOptionPane.OK_OPTION, JOptionPane.INFORMATION_MESSAGE,
                                             null, options, options[0]);
        if (n == JOptionPane.OK_OPTION) {
            // Copy the deck code to the clipboard.
            StringSelection copiedText = new StringSelection(deckCode);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(copiedText, null);
            JOptionPane.showMessageDialog(rootPane, "Copied deck code to clipboard!", "Export Deck", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnExportActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int index = jlstDecks.getSelectedIndex();
        if (index == -1) 
            return;        
        
        // Prompt the user for whether they want to delete the deck.
        int n = JOptionPane.showConfirmDialog(rootPane, "Do you really want to delete this deck?", "Delete Deck", 
                                             JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
        if (n == JOptionPane.YES_OPTION) {
            // Remove the deck at the currently selected index.
            dlmDecks.removeElementAt(index);            
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void jlstDecksValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlstDecksValueChanged
        if (jlstDecks.getValueIsAdjusting())
            return;
        
        int index = jlstDecks.getSelectedIndex();
        btnEdit.setEnabled(index != -1);
        btnDelete.setEnabled(index != -1);
        btnExport.setEnabled(index != -1);
        if (index != -1)
            btnExport.setEnabled(dlmDecks.get(index).getDeck().deckSize() == 40);
    }//GEN-LAST:event_jlstDecksValueChanged

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        this.setVisible(false);
        Deck newDeck = new Deck();
        dlmDecks.addElement(newDeck);
        
        deckEditorWindow.setCurrentDeck(newDeck);
//        d = new DeckEditorWindow(this, newDeck);
        deckEditorWindow.setVisible(true);
    }//GEN-LAST:event_btnNewActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        int index = jlstDecks.getSelectedIndex();
        if (index == -1)
            return;
        this.setVisible(false);
        deckEditorWindow.setCurrentDeck(dlmDecks.getElementAt(index));
        deckEditorWindow.setVisible(true);
    }//GEN-LAST:event_btnEditActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // Save user decks by writing deck codes to a file.
        try {
            BufferedWriter bw = new BufferedWriter(new FileWriter("USER_DECK_CODES.txt"));
            
            for (int i = 0; i < dlmDecks.size(); i++) {                
                bw.write(dlmDecks.get(i).getName());
                bw.newLine();
                bw.write(dlmDecks.get(i).getDeck().getDeckCode());
                bw.newLine();
            }
            
            bw.close();
        }
        // If the file could not be opened, something went seriously wrong...
        catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnImport;
    private javax.swing.JButton btnNew;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    /*
    private javax.swing.JList<String> jlstDecks;
    */
    private javax.swing.JList<Deck> jlstDecks;
    // End of variables declaration//GEN-END:variables
}
